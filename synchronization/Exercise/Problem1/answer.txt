1.

case 1: two students enroll at the same time
	For example, at time 0, two students enroll, so the "number = number + 1" is execute concurrently. Assume number is 1, so two threads will read number with the same value 1. Then, two threads increase the number. The final value of number maybe 2 while the expected value is 3.

case 2: two students enroll at the same time when the remain slot is 1
	As explained in case 1, although there is just 1 slot for 1 student but the case 1 can lead to the problem that 2 student may successfully enroll

case 3: two students disenroll at the same time
	the same reason in case 1

case 4: one student enroll and disenroll at the same time

Generally: if more than 1 student change the number of slot at the same time -> maybe some unexpected result

2.
Solution:
	enroll() {
		// we can also use semaphore or mutex hear to lock
		
		// enroll activity
		
		// we can also use semaphore or mutex hear to release the lock
	}
	disenroll() {
		// we can also use semaphore or mutex hear to lock

                // disenroll activity

                // we can also use semaphore or mutex hear to release the lock
	}
		
